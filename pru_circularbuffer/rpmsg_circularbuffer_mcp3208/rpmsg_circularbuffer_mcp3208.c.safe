/*
 * Copyright (C) 2015 Texas Instruments Incorporated - http://www.ti.com/
 *
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *	* Redistributions of source code must retain the above copyright
 *	  notice, this list of conditions and the following disclaimer.
 *
 *	* Redistributions in binary form must reproduce the above copyright
 *	  notice, this list of conditions and the following disclaimer in the
 *	  documentation and/or other materials provided with the
 *	  distribution.
 *
 *	* Neither the name of Texas Instruments Incorporated nor the names of
 *	  its contributors may be used to endorse or promote products derived
 *	  from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <stdint.h>
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>
#include <sys/poll.h>

//  CONSTANTS OF CIRCULAR BUFFER
#define		MAX_LENGTH_OF_STRING	81  // Arbitrary number for temporary strings
#define		SUCCESS			        0
#define		FAILURE			        -1
#define		EXIT_LOOP               1


#define MAX_BUFFER_SIZE		512
char readBuf[MAX_BUFFER_SIZE];

/* Circular Buffer */

	int	circularBuffer[MAX_BUFFER_SIZE] = { 0 };	// Empty circular buffer
	int	readIndex	    =	0;	// Index of the read pointer
	int	writeIndex	    =	0;	// Index of the write pointer
	int	bufferLength	=	0;	// Number of values in circular buffer
    int loopStatus      =   0;  // Loop condition variable

#define NUM_MESSAGES		100
#define DEVICE_NAME		"/dev/rpmsg_pru123"

int main(void)
{
	struct pollfd pollfds[1];
	int i;
	int result = 0;
	int * p;
	/* Open the rpmsg_pru character device file */
	pollfds[0].fd = open(DEVICE_NAME, O_RDWR);

	/*
	 * If the RPMsg channel doesn't exist yet the character device
	 * won't either.
	 * Make sure the PRU firmware is loaded and that the rpmsg_pru
	 * module is inserted.
	 */
	if (pollfds[0].fd < 0) {
		printf("Failed to open %s\n", DEVICE_NAME);
		return -1;
	}

	/* The RPMsg channel exists and the character device is opened */
	printf("Opened %s, reading %d buffers\n\n", DEVICE_NAME, NUM_MESSAGES);

        const char msg[] = "hello world!";
        /* Send 'hello world!' to the PRU through the RPMsg channel */
        result = write(pollfds[0].fd, msg, sizeof msg);
        printf("write result = %d\n", result);

	for (i = 0; i < NUM_MESSAGES; i++) {
		/* Send 'hello world!' to the PRU through the RPMsg channel */
		result = write(pollfds[0].fd, msg, sizeof msg);

		if (result > 0) {
			 /* Send 'hello world!' to the PRU through the RPMsg channel */
                result = write(pollfds[0].fd, msg, sizeof msg);
                if (result > 0)
                        printf("Message %d: Sent to PRU\n", i);

		/* Poll until we receive a message from the PRU */
		result = read(pollfds[0].fd, readBuf, MAX_BUFFER_SIZE);

                /* Read the buffer and print it */
                if (result > 0) {
                  for (int i=0; i<result/2; i++) {
                    int data = ((uint16_t*)readBuf)[i];
			p = &circularBuffer[writeIndex];	//armazena o endereço do buffer circularBuffer
			*p = data;							// atribui o valor data para o endereço
			printf("%d, %d, %d\n", *p, bufferLength, writeIndex);
			bufferLength++;	 //	Increase buffer size after writing
			writeIndex++;	 //	Increase writeIndex position to prepare for next write

				// If at last index in buffer, set writeIndex back to 0
				if (writeIndex == MAX_BUFFER_SIZE) {
				writeIndex = 0;
				}
                  }}
                } else
                  printf("read error!!!\n");
	}

	/* Received all the messages the example is complete */
	printf("Received %d messages, closing %s\n", NUM_MESSAGES, DEVICE_NAME);

	/* Close the rpmsg_pru character device file */
	close(pollfds[0].fd);

	return 0;
}

